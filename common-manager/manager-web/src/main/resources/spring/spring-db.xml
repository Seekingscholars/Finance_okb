<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="400" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="600000" />

		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="20" />

		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat,wall,log4j" />
		<!--<property name="filters" value="mergeStat" /> -->
		<property name="connectionInitSqls" value="set names utf8mb4;"/>

	</bean>

	<bean id="readDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url.read}" />
		<property name="username" value="${jdbc.username.read}" />
		<property name="password" value="${jdbc.password.read}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="400" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="600000" />

		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />


		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="20" />

		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat,wall,log4j" />
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>

	<bean id="dataSource" class="com.cn.core.db.MultipleDataSource">
		<property name="defaultTargetDataSource" ref="writeDataSource"/>
		<property name="targetDataSources">
			<map>
				<entry key="writeDataSource" value-ref="writeDataSource"/>
				<entry key="readDataSource" value-ref="readDataSource"/>
			</map>
		</property>
	</bean>

	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- @remarks: 先注释掉.后期还是要依赖maven做的. @data: 20180404 @author: nmnl-->
		<!--<property name="mapperLocations">
			<list>
				<value>classpath:/python/**/*.xml</value>
			</list>
		</property>-->
		<property name="configLocation" value="classpath:/spring/spring-mybatis.xml" />
	</bean>

	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cn.wechat.mapper,com.cn.core.mapper" />
		<!-- @remarks: 先注释掉.后期还是要依赖maven做的. @data: 20180404 @author: nmnl-->
		<property name="annotationClass" value="com.cn.core.mapper.RDBatisDao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	<!-- MyBatis end -->

	<!--事务管理器配置 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 对@Transactional这个注解进行的驱动，这是基于注解的方式使用事务配置声明 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<!-- 拦截器方式配置事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 传播行为 -->
		<tx:attributes>
			<!--<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />-->
			<tx:method name="*Affair" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<!-- 只对业务逻辑层实施事务 -->
	<aop:config>
		<!-- com.cms.wechat.service.article.impl.ArticlesFindServiceImpl.page()-->
		<!-- com.cms.wechat.service.*.impl.*.*()-->
		<aop:pointcut id="txPointcut" expression="execution(* com.cn.manager.service.*.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	<!-- 定义事务管理器(声明式的事务) END -->

</beans>